# Import required packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import Ridge, Lasso
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

# 1. Data Generation
np.random.seed(42)
n_samples = 1000
x1 = np.random.rand(n_samples)
x2 = np.random.rand(n_samples)
x3 = np.random.rand(n_samples)
epsilon = np.random.normal(0, 1, n_samples)  # noise
y = 3 + 2*x1 - 1.5*x2 + 0.5*x3 + epsilon      # target variable

# Create DataFrame
data = pd.DataFrame({
    'x1': x1,
    'x2': x2,
    'x3': x3,
    'y': y
})

# 2. Model Training
X = data[['x1', 'x2', 'x3']]
y = data['y']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Ridge Regression
ridge_model = Ridge(alpha=1.0)
ridge_model.fit(X_train, y_train)

# Lasso Regression
lasso_model = Lasso(alpha=0.1)
lasso_model.fit(X_train, y_train)

# Coefficients
ridge_coefficients = pd.Series(ridge_model.coef_, index=X.columns)
lasso_coefficients = pd.Series(lasso_model.coef_, index=X.columns)

print("Ridge Regression Coefficients:")
print(ridge_coefficients)
print("\nLasso Regression Coefficients:")
print(lasso_coefficients)

# 3. Model Evaluation
ridge_predictions = ridge_model.predict(X_test)
lasso_predictions = lasso_model.predict(X_test)

ridge_mse = mean_squared_error(y_test, ridge_predictions)
lasso_mse = mean_squared_error(y_test, lasso_predictions)

print("\nMean Squared Error (Ridge): {:.4f}".format(ridge_mse))
print("Mean Squared Error (Lasso): {:.4f}".format(lasso_mse))

# 4. Plot Actual vs Predicted for Ridge
plt.figure(figsize=(8, 6))
plt.scatter(y_test, ridge_predictions, alpha=0.5, label='Ridge Predictions', color='blue')
plt.xlabel("Actual y")
plt.ylabel("Predicted y")
plt.title("Ridge Regression: Actual vs Predicted")
plt.legend()
plt.grid(True)
plt.show()
